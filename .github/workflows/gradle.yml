# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  JUNIT_TESTS_REPORTS: ./combined-jacoco-reports

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

    - name: Build with Gradle Wrapper
      run: ./gradlew build -x tests

    - name: Gradle tests
      run: ./gradlew test jacocoTestReport

    - name: Upload coverage to CodeCov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Collect JUnit xml reports
      if: always()
      run: |
        mkdir -p ${{ env.JUNIT_TESTS_REPORTS }}
        find . -type f -name "TEST-*.xml" -exec cp {} ${{ env.JUNIT_TEST_REPORTS }}/ \;

    - name: Parse XML Junit reports
      if: always()
      id: parse-results
      uses: ./.github/workflows/actions/parse-xml-action
      with:
        dir-path: ${{ env.JUNIT_TESTS_REPORTS }}

    - name: Output number of tests
      if: always()
      id: create_badges_tests
      env:
        LABEL_TOTAL: tests
        COLOR_TOTAL: cyan
      run: |
        curl -s -f https://badgen.net/badge/${{env.LABEL_TOTAL}}/${{env.STATUS_TOTAL}}/${{env.COLOR_TOTAL}} > insight_badge_total_test.svg

    - name: Upload badges_total to Gist
      env:
        GIST_TOKEN: ${{ secrets.GIST_TOKEN }}
        uses: popsiclestick/gist-sync-action@v1.2.0
        if: >
          github.event.repository.fork == false
          && steps.create_badges_tests.outcome == 'success'
          && always()
        with:
          auth: ${{ secrets.GIST_TOKEN }}
          gist_url: https://gist.github.com/wezzen
          gist_title: badge_total.svg
          gist_description: Total Tests
          github_file: badge_total.svg

    # NOTE: The Gradle Wrapper is the default and recommended way to run Gradle (https://docs.gradle.org/current/userguide/gradle_wrapper.html).
    # If your project does not have the Gradle Wrapper configured, you can use the following configuration to run Gradle with a specified version.
    #
    # - name: Setup Gradle
    #   uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
    #   with:
    #     gradle-version: '8.9'
    #
    # - name: Build with Gradle 8.9
    #   run: gradle build

  dependency-submission:

    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    # Generates and submits a dependency graph, enabling Dependabot Alerts for all project dependencies.
    # See: https://github.com/gradle/actions/blob/main/dependency-submission/README.md
    - name: Generate and submit dependency graph
      uses: gradle/actions/dependency-submission@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
